Rule: type_specifier -> INT
Rule: declaration_specifiers -> type_specifier
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Rule: declarator -> direct_declarator
Rule: init_declarator -> declarator
Rule: init_declarator_list -> init_declarator
Rule: declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule: external_declaration -> declaration
Rule: translation_unit -> external_declaration
Rule: type_specifier -> INT
Rule: declaration_specifiers -> type_specifier
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Rule: direct_declarator -> direct_declarator OPAREN CPAREN
Rule: declarator -> direct_declarator
Rule: type_specifier -> SIGNED
Rule: type_specifier -> UNSIGNED
Rule: type_qualifier -> CONST
Rule: type_specifier -> INT
Rule: declaration_specifiers -> type_specifier
Rule: declaration_specifiers -> type_qualifier declaration_specifiers
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Rule: declarator -> direct_declarator
Rule: init_declarator -> declarator
Rule: init_declarator_list -> init_declarator
Rule: declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule: declaration_list -> declaration
Rule: type_qualifier -> VOLATILE
Rule: type_specifier -> UNSIGNED
Rule: type_specifier -> CHAR
Rule: declaration_specifiers -> type_specifier
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: declaration_specifiers -> type_qualifier declaration_specifiers
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Rule: declarator -> direct_declarator
Rule: init_declarator -> declarator
Rule: init_declarator_list -> init_declarator
Rule: declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule: declaration_list -> declaration_list declaration
Rule: type_qualifier -> CONST
Rule: storage_class_specifier -> AUTO
Rule: type_qualifier -> VOLATILE
Rule: type_specifier -> FLOAT
Rule: declaration_specifiers -> type_specifier
Rule: declaration_specifiers -> type_qualifier declaration_specifiers
Rule: declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule: declaration_specifiers -> type_qualifier declaration_specifiers
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Rule: declarator -> direct_declarator
Rule: init_declarator -> declarator
Rule: init_declarator_list -> init_declarator
Rule: declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule: declaration_list -> declaration_list declaration
Rule: identifier -> IDENTIFIER
Rule: primary_expression -> identifier
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: assignment_operator -> ASSIGN
Rule: constant -> INTEGER_CONSTANT
Rule: primary_expression -> constant
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: cast_expression -> unary_expression
Rule: multiplicative_expression -> cast_expression
Rule: additive_expression -> multiplicative_expression
Rule: shift_expression -> additive_expression
Rule: relational_expression -> shift_expression
Rule: equality_expression -> relational_expression
Rule: and_expression -> equality_expression
Rule: exclusive_or_expression -> and_expression
Rule: inclusive_or_expression -> exclusive_or_expression
Rule: logical_and_expression -> inclusive_or_expression
Rule: logical_or_expression -> logical_and_expression
Rule: conditional_expression -> logical_or_expression
Rule: assignment_expression -> conditional_expression
Rule: assignment_expression -> unary_expression assignment_operator assignment_expression
Rule: expression -> assignment_expression
Rule: expression_statement -> expression SEMICOLON
Rule: statement -> expression_statement
Rule: statement_list -> statement
Rule: storage_class_specifier -> EXTERN
Rule: type_qualifier -> VOLATILE
Rule: type_specifier -> UNSIGNED
Rule: type_specifier -> DOUBLE
Rule: declaration_specifiers -> type_specifier
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: declaration_specifiers -> type_qualifier declaration_specifiers
Rule: declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Rule: declarator -> direct_declarator
Rule: init_declarator -> declarator
Rule: init_declarator_list -> init_declarator
Rule: declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule: declaration_list -> declaration
Rule: type_specifier -> INT
Rule: type_specifier -> CHAR
Rule: type_specifier -> DOUBLE
Rule: declaration_specifiers -> type_specifier
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Rule: declarator -> direct_declarator
Rule: init_declarator -> declarator
Rule: init_declarator_list -> init_declarator
Rule: declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule: declaration_list -> declaration_list declaration
Rule: identifier -> IDENTIFIER
Rule: primary_expression -> identifier
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: assignment_operator -> ASSIGN
Rule: constant -> INTEGER_CONSTANT
Rule: primary_expression -> constant
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: cast_expression -> unary_expression
Rule: multiplicative_expression -> cast_expression
Rule: additive_expression -> multiplicative_expression
Rule: shift_expression -> additive_expression
Rule: relational_expression -> shift_expression
Rule: equality_expression -> relational_expression
Rule: and_expression -> equality_expression
Rule: exclusive_or_expression -> and_expression
Rule: inclusive_or_expression -> exclusive_or_expression
Rule: logical_and_expression -> inclusive_or_expression
Rule: logical_or_expression -> logical_and_expression
Rule: conditional_expression -> logical_or_expression
Rule: assignment_expression -> conditional_expression
Rule: assignment_expression -> unary_expression assignment_operator assignment_expression
Rule: expression -> assignment_expression
Rule: expression_statement -> expression SEMICOLON
Rule: statement -> expression_statement
Rule: statement_list -> statement
Rule: identifier -> IDENTIFIER
Rule: primary_expression -> identifier
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: assignment_operator -> ASSIGN
Rule: constant -> INTEGER_CONSTANT
Rule: primary_expression -> constant
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: cast_expression -> unary_expression
Rule: multiplicative_expression -> cast_expression
Rule: additive_expression -> multiplicative_expression
Rule: shift_expression -> additive_expression
Rule: relational_expression -> shift_expression
Rule: equality_expression -> relational_expression
Rule: and_expression -> equality_expression
Rule: exclusive_or_expression -> and_expression
Rule: inclusive_or_expression -> exclusive_or_expression
Rule: logical_and_expression -> inclusive_or_expression
Rule: logical_or_expression -> logical_and_expression
Rule: conditional_expression -> logical_or_expression
Rule: assignment_expression -> conditional_expression
Rule: assignment_expression -> unary_expression assignment_operator assignment_expression
Rule: expression -> assignment_expression
Rule: expression_statement -> expression SEMICOLON
Rule: statement -> expression_statement
Rule: statement_list -> statement
Rule: compound_statement -> OBRACE statement_list CBRACE
Rule: statement -> compound_statement
Rule: statement_list -> statement_list statement
Rule: compound_statement -> OBRACE declaration_list statement_list CBRACE
Rule: statement -> compound_statement
Rule: statement_list -> statement_list statement
Rule: type_specifier -> FLOAT
Rule: type_qualifier -> CONST
Rule: type_qualifier -> CONST
Rule: type_specifier -> FLOAT
Rule: declaration_specifiers -> type_specifier
Rule: declaration_specifiers -> type_qualifier declaration_specifiers
Rule: declaration_specifiers -> type_qualifier declaration_specifiers
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Rule: declarator -> direct_declarator
Rule: init_declarator -> declarator
Rule: init_declarator_list -> init_declarator
Rule: declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule: declaration_list -> declaration
Rule: type_specifier -> INT
Rule: type_specifier -> DOUBLE
Rule: type_specifier -> UNSIGNED
Rule: type_specifier -> FLOAT
Rule: declaration_specifiers -> type_specifier
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: declaration_specifiers -> type_specifier declaration_specifiers
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Rule: declarator -> direct_declarator
Rule: init_declarator -> declarator
Rule: init_declarator_list -> init_declarator
Rule: declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule: declaration_list -> declaration
Rule: identifier -> IDENTIFIER
Rule: primary_expression -> identifier
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: assignment_operator -> ASSIGN
Rule: constant -> INTEGER_CONSTANT
Rule: primary_expression -> constant
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: cast_expression -> unary_expression
Rule: multiplicative_expression -> cast_expression
Rule: additive_expression -> multiplicative_expression
Rule: shift_expression -> additive_expression
Rule: relational_expression -> shift_expression
Rule: equality_expression -> relational_expression
Rule: and_expression -> equality_expression
Rule: exclusive_or_expression -> and_expression
Rule: inclusive_or_expression -> exclusive_or_expression
Rule: logical_and_expression -> inclusive_or_expression
Rule: logical_or_expression -> logical_and_expression
Rule: conditional_expression -> logical_or_expression
Rule: assignment_expression -> conditional_expression
Rule: assignment_expression -> unary_expression assignment_operator assignment_expression
Rule: expression -> assignment_expression
Rule: expression_statement -> expression SEMICOLON
Rule: statement -> expression_statement
Rule: statement_list -> statement
Rule: identifier -> IDENTIFIER
Rule: primary_expression -> identifier
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: assignment_operator -> ASSIGN
Rule: constant -> INTEGER_CONSTANT
Rule: primary_expression -> constant
Rule: postfix_expression -> primary_expression
Rule: unary_expression -> postfix_expression
Rule: cast_expression -> unary_expression
Rule: multiplicative_expression -> cast_expression
Rule: additive_expression -> multiplicative_expression
Rule: shift_expression -> additive_expression
Rule: relational_expression -> shift_expression
Rule: equality_expression -> relational_expression
Rule: and_expression -> equality_expression
Rule: exclusive_or_expression -> and_expression
Rule: inclusive_or_expression -> exclusive_or_expression
Rule: logical_and_expression -> inclusive_or_expression
Rule: logical_or_expression -> logical_and_expression
Rule: conditional_expression -> logical_or_expression
Rule: assignment_expression -> conditional_expression
Rule: assignment_expression -> unary_expression assignment_operator assignment_expression
Rule: expression -> assignment_expression
Rule: expression_statement -> expression SEMICOLON
Rule: statement -> expression_statement
Rule: statement_list -> statement
Rule: compound_statement -> OBRACE statement_list CBRACE
Rule: statement -> compound_statement
Rule: statement_list -> statement_list statement
Rule: compound_statement -> OBRACE declaration_list statement_list CBRACE
Rule: statement -> compound_statement
Rule: statement_list -> statement
Rule: compound_statement -> OBRACE declaration_list statement_list CBRACE
Rule: statement -> compound_statement
Rule: statement_list -> statement_list statement
Rule: compound_statement -> OBRACE declaration_list statement_list CBRACE
Rule: function_definition -> declaration_specifiers declarator compound_statement
Rule: external_declaration -> function_definition
Rule: translation_unit -> translation_unit external_declaration
WARNING: Scope 4
	Shadowing identifier: "c" on line 7 from scope 3
