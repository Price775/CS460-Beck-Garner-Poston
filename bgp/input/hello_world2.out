Token: int
Rule: type_specifier -> INT
Token: main
Rule: declaration_specifiers -> type_specifier
Rule: identifier -> IDENTIFIER
Rule: direct_declarator -> identifier
Token: (
Token: )
Rule: direct_declarator -> direct_declarator OPAREN CPAREN
Token: {
Rule: declarator -> direct_declarator
Token: printf
Rule: identifier -> IDENTIFIER
Token: (
Rule: primary_expression -> identifier
Rule: postfix_expression -> primary_expression
Token: "Hello world!\n"
Rule: string -> STRING_LITERAL
Rule: primary_expression -> string
Rule: postfix_expression -> primary_expression
Token: )
Rule: unary_expression -> postfix_expression
Rule: cast_expression -> unary_expression
Rule: multiplicative_expression -> cast_expression
Rule: additive_expression -> multiplicative_expression
Rule: shift_expression -> additive_expression
Rule: relational_expression -> shift_expression
Rule: equality_expression -> relational_expression
Rule: and_expression -> equality_expression
Rule: exclusive_or_expression -> and_expression
Rule: inclusive_or_expression -> exclusive_or_expression
Rule: logical_and_expression -> inclusive_or_expression
Rule: logical_or_expression -> logical_and_expression
Rule: conditional_expression -> logical_or_expression
Rule: assignment_expression -> conditional_expression
Rule: argument_expression_list -> assignment_expression
Rule: postfix_expression -> postfix_expression OPAREN argument_expression_list CPAREN
Token: ;
Rule: unary_expression -> postfix_expression
Rule: cast_expression -> unary_expression
Rule: multiplicative_expression -> cast_expression
Rule: additive_expression -> multiplicative_expression
Rule: shift_expression -> additive_expression
Rule: relational_expression -> shift_expression
Rule: equality_expression -> relational_expression
Rule: and_expression -> equality_expression
Rule: exclusive_or_expression -> and_expression
Rule: inclusive_or_expression -> exclusive_or_expression
Rule: logical_and_expression -> inclusive_or_expression
Rule: logical_or_expression -> logical_and_expression
Rule: conditional_expression -> logical_or_expression
Rule: assignment_expression -> conditional_expression
Rule: expression -> assignment_expression
Rule: expression_statement -> expression SEMICOLON
Rule: statement -> expression_statement
Rule: statement_list -> statement
Token: return
Token: 0
Rule: constant -> INTEGER_CONSTANT
Rule: primary_expression -> constant
Rule: postfix_expression -> primary_expression
Token: ;
Rule: unary_expression -> postfix_expression
Rule: cast_expression -> unary_expression
Rule: multiplicative_expression -> cast_expression
Rule: additive_expression -> multiplicative_expression
Rule: shift_expression -> additive_expression
Rule: relational_expression -> shift_expression
Rule: equality_expression -> relational_expression
Rule: and_expression -> equality_expression
Rule: exclusive_or_expression -> and_expression
Rule: inclusive_or_expression -> exclusive_or_expression
Rule: logical_and_expression -> inclusive_or_expression
Rule: logical_or_expression -> logical_and_expression
Rule: conditional_expression -> logical_or_expression
Rule: assignment_expression -> conditional_expression
Rule: expression -> assignment_expression
Rule: jump_statement -> RETURN expression SEMICOLON
Rule: statement -> jump_statement
Rule: statement_list -> statement_list statement
Token: }
Rule: compound_statement -> OBRACE statement_list CBRACE
Rule: function_definition -> declaration_specifiers declarator compound_statement
Rule: external_declaration -> function_definition
Rule: translation_unit -> external_declaration
